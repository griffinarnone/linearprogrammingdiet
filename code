from pulp import LpProblem, LpVariable, LpMinimize

# Linear programming problem
prob = LpProblem("Nutrition_Optimization", LpMinimize)

# Decision Variables
x1 = LpVariable("Vanilla_Gatorade_Servings", lowBound=0, cat='Integer')
x2 = LpVariable("Honey_Bunches_of_Oats_Servings", lowBound=0, cat='Integer')
x3 = LpVariable("Barilla_Rotini_Servings", lowBound=0, cat='Integer')
x4 = LpVariable("Horizon_Organic_Milk_Servings", lowBound=0, cat='Integer')
x5 = LpVariable("Smuckers_Peanut_Butter_Servings", lowBound=0, cat='Integer')

# Objective Function
prob += 3.44 * x1 + 0.47 * x2 + 0.51 * x3 + 0.7 * x4 + 0.27 * x5, "Total_Cost"

# Nutritional Constraints (Weekly Limits)
prob += 290 * x1 + 180 * x2 + 0 * x3 + 135 * x4 + 95 * x5 <= 5000 * 7, "Sodium_Constraint"
prob += 370 * x1 + 170 * x2 + 190 * x3 + 160 * x4 + 190 * x5 >= 2000 * 7, "Energy_Constraint"
prob += 20 * x1 + 3 * x2 + 10 * x3 + 8 * x4 + 8 * x5 >= 50 * 7, "Protein_Constraint"
prob += 3 * x1 + 2 * x2 + 0 * x3 + 2.5 * x4 + 0 * x5 >= 20 * 7, "Vitamin_D_Constraint"
prob += 390 * x1 + 10 * x2 + 14 * x3 + 300 * x4 + 18 * x5 >= 1300 * 7, "Calcium_Constraint"
prob += 1.5 * x1 + 16.2 * x2 + 2 * x3 + 0 * x4 + 1 * x5 >= 18 * 7, "Iron_Constraint"
prob += 650 * x1 + 80 * x2 + 245 * x3 + 410 * x4 + 201 * x5 >= 4700 * 7, "Potassium_Constraint"

# Solve the problem
prob.solve()

# Display the results
print("Status:", prob.status)
print("Optimal servings:")
for var in prob.variables():
    print(f"{var.name}: {var.varValue}")

# Print optimal weekly cost
print("Optimal weekly cost:", round(prob.objective.value(), 2))

# Coefficients matrix for the nutritional constraints
A = [
    [290, 180, 0, 135, 95],  # Sodium constraint
    [370, 170, 190, 160, 190],  # Energy constraint
    [20, 3, 10, 8, 8],  # Protein constraint
    [3, 2, 0, 2.5, 0],  # Vitamin D constraint
    [390, 10, 14, 300, 18],  # Calcium constraint
    [1.5, 16.2, 2, 0, 1],  # Iron constraint
    [650, 80, 245, 410, 201]  # Potassium constraint
]

# Nutritional values and units
nutritional_values = ["Sodium", "Energy", "Protein", "Vitamin D", "Calcium", "Iron", "Potassium"]
nutritional_units = ["mg", "cal", "g", "mcg", "mg", "mg", "mg"]

# Calculate and print the measurement of each nutritional value (for the week)
print("\nMeasurement of each nutritional value under optimal solution:")
for nutrient, unit, coefficients in zip(nutritional_values, nutritional_units, A):
    total_measurement = sum([var.varValue * value for var, value in zip(prob.variables(), coefficients)])
    print(f"{nutrient}: {total_measurement} {unit} per week")
