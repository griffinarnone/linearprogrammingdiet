import pandas as pd
import numpy as np

import matplotlib.pyplot as plt
import seaborn as sns
sns.set()

#### Downloading and reading the the HMEQ data set into python (on mac) ####
HMEQ_file = '/Users/griffinarnone/Library/Mobile Documents/com~apple~CloudDocs/Coding Work/practical-machine-learning/assignment01/HMEQ_Loss.csv'

df = pd.read_csv(HMEQ_file)

#### Exploring the input and target variables using statistical techniques ####

# # Revealing variable names as well as the number of non-null data points and variable types
# df.info()
# print("\n\n")

# # Show the first 5 rows of data
# print(df.head().T)
# print("\n\n")

# # A clear representation of the data types of each variable
# print(df.dtypes)
# print("\n\n")

# # A statistical description of the data
# print(df.describe().T)
# print("\n\n")

# Categorizing the variables by type
TARGET_A = 'TARGET_BAD_FLAG'
TARGET_B = 'TARGET_LOSS_AMT'

dt = df.dtypes
objList = []
intList = []
floatList = []

for i in dt.index:
    if i in ([TARGET_A, TARGET_B]) : continue
    if dt[i] in (["object"]) : objList.append(i)
    if dt[i] in (["int64"]) : intList.append(i)
    if dt[i] in (["float64"]) : floatList.append(i)

# # Showing default rates by REASON and JOB and the default amounts on average
# for i in objList:
#     print("Class = ", i)
#     g = df.groupby(i)
#     print(g[i].count())
#     print("\n")
#     x = g[TARGET_A].mean()
#     print("Default Probability per", x)
#     print("\n")
#     y = g[TARGET_B].mean()
#     print("Avg Default Amount per", y)
#     print("\n")

# # Showing default rate and amounts for continuous variables
# print("Integer Variables\n\n")
# for i in intList:
#     print("Variable = ", i)
#     g = df.groupby(TARGET_A)
#     x = g[i].mean()
#     print("Default Probability", x)
#     print("\n")
#     c = df[i].corr(df[TARGET_A])
#     c = round(100*c, 1)
#     print("Default Correlation = ", c, "%")
#     print("\n")

# print("Float Variables\n\n")
# for i in floatList:
#     print("Variable = ", i)
#     g = df.groupby(TARGET_A)
#     x = g[i].mean()
#     print("Default Probability", x)
#     c = df[i].corr(df[TARGET_A])
#     c = round(100*c, 1)
#     print("Default Correlation = ", c, "%")
#     print("\n")

#### Exploring the input and target variables using graphing and other visualization techniques ####

# # Visualize some pie charts
# for i in objList:
#     x = df[i].value_counts(dropna=False)
#     #print(x)
#     theLabels = x.axes[0].tolist()
#     print(theLabels)
#     theSlices = list(x)
#     print(theSlices)
#     plt.pie(theSlices, labels=theLabels, startangle=90, shadow=True, autopct="%1.1f%%")
#     plt.title("Pie Chart: " + i)
#     plt.show()

# # Explode pie chart slices (example) for effect
# x = df["JOB"].value_counts(dropna=False)
# theLabels = x.axes[0].tolist()
# theSlices = list(x)
# explodeList = [0 for i in theSlices]
# explodeList [2] = 0.3
# print(theLabels)
# print(theSlices)
# print(explodeList)
# plt.pie(theSlices, labels=theLabels, startangle=90, explode=explodeList, shadow=True, autopct="%1.1f%%")
# plt.title ("Pie Chart: " + i)
# plt.show()
    
# # Visualizing a histogram for integer and float variable types
# for i in intList:
#     plt.hist(df[i])
#     plt.xlabel(i)
#     plt.ylabel("frequency")
#     plt.show()

# for i in floatList:
#     plt.hist(df[i])
#     plt.xlabel(i)
#     plt.ylabel("frequency")
#     plt.show()

#### One Hot Encoding ####

# Converting categorical variables into numerical ones using one hot encoding
for i in objList:
    print("Class = ", i)
    print(df[i].unique())
    g = df.groupby(i)
    x = g[TARGET_A].mean()
    print("Default Probability", x)
    print("\n")
    # x = g[TARGET_B].mean()
    x = g[TARGET_B].median()
    print("Avg Default Amount", x)
    print("\n")

for i in objList:
    print("Class = ", i)
    thePrefix = "z_" + i
    # print(thePrefix)
    y = pd.get_dummies(df[i], prefix=thePrefix, dummy_na=False)
    df = pd.concat([df, y], axis=1)

#### Impute missing data (object data type) ####

# Fill missing data (object data type) with MISSING (delete original column)
for i in objList:
    if df[i].isna().sum() == 0: continue
    print(i)
    print("HAS MISSING\n")
    NAME = "IMP " + i
    # print(NAME)
    df[NAME] = df[i]
    df[NAME] = df[NAME].fillna("MISSING")
    print("variable", i, "has this many missing", df[i].isna().sum())
    print("variable", NAME, "has this many missing", df[NAME].isna().sum())
    print("\n")
    df = df.drop(i, axis=1)

#### Impute missing data (continuous data type) ####

# Fill missing data (continuous data type) with the median (delete original column)
for i in floatList:
    if df[i].isna().sum() == 0: continue
    FLAG = "M " + i
    IMP = "IMP " + i
    print(i)
    print(df[i].isna().sum())
    print(FLAG)
    print(IMP)
    print("\n")
    df[FLAG] = df[i].isna() + 0
    df[IMP] = df[i]
    df.loc[df[IMP].isna(), IMP] = df[i].median()
    df = df.drop(i, axis=1)
    
for i in intList:
    if df[i].isna().sum() == 0: continue
    FLAG = "M " + i
    IMP = "IMP " + i
    print(i)
    print(df[i].isna().sum())
    print(FLAG)
    print(IMP)
    print("\n")
    df[FLAG] = df[i].isna() + 0
    df[IMP] = df[i]
    df.loc[df[IMP].isna(), IMP] = df[i].median()
    df = df.drop(i, axis=1)

print(df.describe().T)
